/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/~__root'
import { Route as DashboardImport } from './routes/~dashboard'
import { Route as BrowseImport } from './routes/~_browse'
import { Route as AuthImport } from './routes/~_auth'
import { Route as BrowseSearchRouteImport } from './routes/~_browse/~search/~route'
import { Route as BrowseAccountImport } from './routes/~_browse/~account'
import { Route as DashboardProductsNewRouteImport } from './routes/~dashboard/~products/~new/~route'
import { Route as DashboardProductsIndexImport } from './routes/~dashboard/~products/~index'
import { Route as BrowsehomeIndexImport } from './routes/~_browse/~(home)/~index'
import { Route as DashboardProductsProductIdEditImport } from './routes/~dashboard/~products/~$productId/~edit'
import { Route as BrowseAccountAddressesNewRouteImport } from './routes/~_browse/~account/~addresses/~new/~route'
import { Route as BrowseAccountAddressesIndexImport } from './routes/~_browse/~account/~addresses/~index'
import { Route as BrowseAccountAddressesAddressIdEditImport } from './routes/~_browse/~account/~addresses/~$addressId/~edit'

// Create Virtual Routes

const AuthSignupRouteLazyImport = createFileRoute('/_auth/signup')()
const AuthResetPasswordRouteLazyImport = createFileRoute(
  '/_auth/reset-password',
)()
const AuthLoginRouteLazyImport = createFileRoute('/_auth/login')()
const AuthForgotPasswordRouteLazyImport = createFileRoute(
  '/_auth/forgot-password',
)()
const BrowseAccountgeneralIndexLazyImport = createFileRoute(
  '/_browse/account/(general)/',
)()

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const BrowseRoute = BrowseImport.update({
  id: '/_browse',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupRouteLazyRoute = AuthSignupRouteLazyImport.update({
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/~_auth/~signup/~route.lazy').then((d) => d.Route),
)

const AuthResetPasswordRouteLazyRoute = AuthResetPasswordRouteLazyImport.update(
  {
    path: '/reset-password',
    getParentRoute: () => AuthRoute,
  } as any,
).lazy(() =>
  import('./routes/~_auth/~reset-password/~route.lazy').then((d) => d.Route),
)

const AuthLoginRouteLazyRoute = AuthLoginRouteLazyImport.update({
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/~_auth/~login/~route.lazy').then((d) => d.Route),
)

const AuthForgotPasswordRouteLazyRoute =
  AuthForgotPasswordRouteLazyImport.update({
    path: '/forgot-password',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/~_auth/~forgot-password/~route.lazy').then((d) => d.Route),
  )

const BrowseSearchRouteRoute = BrowseSearchRouteImport.update({
  path: '/search',
  getParentRoute: () => BrowseRoute,
} as any).lazy(() =>
  import('./routes/~_browse/~search/~route.lazy').then((d) => d.Route),
)

const BrowseAccountRoute = BrowseAccountImport.update({
  path: '/account',
  getParentRoute: () => BrowseRoute,
} as any)

const DashboardProductsNewRouteRoute = DashboardProductsNewRouteImport.update({
  path: '/products/new',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/~dashboard/~products/~new/~route.lazy').then((d) => d.Route),
)

const DashboardProductsIndexRoute = DashboardProductsIndexImport.update({
  path: '/products/',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/~dashboard/~products/~index.lazy').then((d) => d.Route),
)

const BrowsehomeIndexRoute = BrowsehomeIndexImport.update({
  path: '/',
  getParentRoute: () => BrowseRoute,
} as any).lazy(() =>
  import('./routes/~_browse/~(home)/~index.lazy').then((d) => d.Route),
)

const BrowseAccountgeneralIndexLazyRoute =
  BrowseAccountgeneralIndexLazyImport.update({
    path: '/',
    getParentRoute: () => BrowseAccountRoute,
  } as any).lazy(() =>
    import('./routes/~_browse/~account/~(general)/~index.lazy').then(
      (d) => d.Route,
    ),
  )

const DashboardProductsProductIdEditRoute =
  DashboardProductsProductIdEditImport.update({
    path: '/products/$productId/edit',
    getParentRoute: () => DashboardRoute,
  } as any).lazy(() =>
    import('./routes/~dashboard/~products/~$productId/~edit.lazy').then(
      (d) => d.Route,
    ),
  )

const BrowseAccountAddressesNewRouteRoute =
  BrowseAccountAddressesNewRouteImport.update({
    path: '/addresses/new',
    getParentRoute: () => BrowseAccountRoute,
  } as any).lazy(() =>
    import('./routes/~_browse/~account/~addresses/~new/~route.lazy').then(
      (d) => d.Route,
    ),
  )

const BrowseAccountAddressesIndexRoute =
  BrowseAccountAddressesIndexImport.update({
    path: '/addresses/',
    getParentRoute: () => BrowseAccountRoute,
  } as any).lazy(() =>
    import('./routes/~_browse/~account/~addresses/~index.lazy').then(
      (d) => d.Route,
    ),
  )

const BrowseAccountAddressesAddressIdEditRoute =
  BrowseAccountAddressesAddressIdEditImport.update({
    path: '/addresses/$addressId/edit',
    getParentRoute: () => BrowseAccountRoute,
  } as any).lazy(() =>
    import('./routes/~_browse/~account/~addresses/~$addressId/~edit.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_browse': {
      preLoaderRoute: typeof BrowseImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_browse/account': {
      preLoaderRoute: typeof BrowseAccountImport
      parentRoute: typeof BrowseImport
    }
    '/_browse/search': {
      preLoaderRoute: typeof BrowseSearchRouteImport
      parentRoute: typeof BrowseImport
    }
    '/_auth/forgot-password': {
      preLoaderRoute: typeof AuthForgotPasswordRouteLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/login': {
      preLoaderRoute: typeof AuthLoginRouteLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/reset-password': {
      preLoaderRoute: typeof AuthResetPasswordRouteLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/signup': {
      preLoaderRoute: typeof AuthSignupRouteLazyImport
      parentRoute: typeof AuthImport
    }
    '/_browse/(home)/': {
      preLoaderRoute: typeof BrowsehomeIndexImport
      parentRoute: typeof BrowseImport
    }
    '/dashboard/products/': {
      preLoaderRoute: typeof DashboardProductsIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/products/new': {
      preLoaderRoute: typeof DashboardProductsNewRouteImport
      parentRoute: typeof DashboardImport
    }
    '/_browse/account/addresses/': {
      preLoaderRoute: typeof BrowseAccountAddressesIndexImport
      parentRoute: typeof BrowseAccountImport
    }
    '/_browse/account/addresses/new': {
      preLoaderRoute: typeof BrowseAccountAddressesNewRouteImport
      parentRoute: typeof BrowseAccountImport
    }
    '/dashboard/products/$productId/edit': {
      preLoaderRoute: typeof DashboardProductsProductIdEditImport
      parentRoute: typeof DashboardImport
    }
    '/_browse/account/(general)/': {
      preLoaderRoute: typeof BrowseAccountgeneralIndexLazyImport
      parentRoute: typeof BrowseAccountImport
    }
    '/_browse/account/addresses/$addressId/edit': {
      preLoaderRoute: typeof BrowseAccountAddressesAddressIdEditImport
      parentRoute: typeof BrowseAccountImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AuthRoute.addChildren([
    AuthForgotPasswordRouteLazyRoute,
    AuthLoginRouteLazyRoute,
    AuthResetPasswordRouteLazyRoute,
    AuthSignupRouteLazyRoute,
  ]),
  BrowseRoute.addChildren([
    BrowseAccountRoute.addChildren([
      BrowseAccountAddressesIndexRoute,
      BrowseAccountAddressesNewRouteRoute,
      BrowseAccountgeneralIndexLazyRoute,
      BrowseAccountAddressesAddressIdEditRoute,
    ]),
    BrowseSearchRouteRoute,
    BrowsehomeIndexRoute,
  ]),
  DashboardRoute.addChildren([
    DashboardProductsIndexRoute,
    DashboardProductsNewRouteRoute,
    DashboardProductsProductIdEditRoute,
  ]),
])

/* prettier-ignore-end */
